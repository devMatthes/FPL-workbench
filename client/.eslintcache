[{"/mnt/d/Code/FPL-workbench/client/src/index.js":"1","/mnt/d/Code/FPL-workbench/client/src/App.js":"2","/mnt/d/Code/FPL-workbench/client/src/reportWebVitals.js":"3","/mnt/d/Code/FPL-workbench/client/src/components/Tots.js":"4","/mnt/d/Code/FPL-workbench/client/src/views/TopPlayers.js":"5","/mnt/d/Code/FPL-workbench/client/src/components/BestPlayers.js":"6","/mnt/d/Code/FPL-workbench/client/src/helpers/FetchAllPlayers.js":"7","/mnt/d/Code/FPL-workbench/client/src/helpers/RateAllPlayers.js":"8","/mnt/d/Code/FPL-workbench/client/src/helpers/FetchPlayersStats.js":"9","/mnt/d/Code/FPL-workbench/client/src/helpers/AssignPlayerStats.js":"10","/mnt/d/Code/FPL-workbench/client/src/helpers/FetchAllTeams.js":"11"},{"size":535,"mtime":1611052409422,"results":"12","hashOfConfig":"13"},{"size":528,"mtime":1610298648957,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1610298649044,"results":"15","hashOfConfig":"13"},{"size":3824,"mtime":1611510299613,"results":"16","hashOfConfig":"13"},{"size":1728,"mtime":1610298649067,"results":"17","hashOfConfig":"13"},{"size":1327,"mtime":1610298648981,"results":"18","hashOfConfig":"13"},{"size":232,"mtime":1610298649007,"results":"19","hashOfConfig":"13"},{"size":7605,"mtime":1611510306284,"results":"20","hashOfConfig":"13"},{"size":235,"mtime":1610702067346,"results":"21","hashOfConfig":"13"},{"size":923,"mtime":1611052374682,"results":"22","hashOfConfig":"13"},{"size":226,"mtime":1610962927540,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"dqkt5a",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/mnt/d/Code/FPL-workbench/client/src/index.js",[],["50","51"],"/mnt/d/Code/FPL-workbench/client/src/App.js",[],["52","53"],"/mnt/d/Code/FPL-workbench/client/src/reportWebVitals.js",[],"/mnt/d/Code/FPL-workbench/client/src/components/Tots.js",[],"/mnt/d/Code/FPL-workbench/client/src/views/TopPlayers.js",[],"/mnt/d/Code/FPL-workbench/client/src/components/BestPlayers.js",[],"/mnt/d/Code/FPL-workbench/client/src/helpers/FetchAllPlayers.js",[],"/mnt/d/Code/FPL-workbench/client/src/helpers/RateAllPlayers.js",["54","55","56","57"],"import { AssignPlayersStats } from \"./AssignPlayerStats\";\nimport { FetchAllTeams } from \"./FetchAllTeams\";\n\nconst API_URL = 'http://localhost:5000/allGameweeks';\n\nlet solver = require(\"javascript-lp-solver/src/solver\");\n\nconst FetchCurrentGameweek = async () => {\n    const response = await fetch(API_URL);\n    const allPlayers = await response.json();\n    return allPlayers;\n}\n\nlet ratedPlayers = [];\nlet allTeams = [];\nlet currentGameweek = 0;\nlet valueIndex = 0;\nlet teamID = 0;\nlet teamStrength = 0;\nlet teamAttack = 0;\nlet teamDefense = 0;\nlet teamFixes = 0;\nlet size = 15;\nlet budget = 1000;\nlet currentBudget = 0;\n\nfunction RatePlayer(item) {\n    let matchesPlayed = currentGameweek;\n\n    if (matchesPlayed === 0) {\n        valueIndex = 0;\n    } else {\n        \n        if (teamID !== item.team) {\n            teamID = item.team;\n            for (let i = 0; i < allTeams.length; i++) {\n                if (allTeams[0][i][\"id\"] === teamID) {\n                    teamStrength = allTeams[0][i][\"strength\"];\n                    teamAttack = (allTeams[0][i][\"strength_attack_home\"] + allTeams[0][i][\"strength_attack_away\"]) / 100;\n                    teamDefense = (allTeams[0][i][\"strength_defence_home\"] + allTeams[0][i][\"strength_defence_away\"]) / 100;\n\n                    for (let j = 0; j < 3; j++) {\n                        teamFixes += allTeams[0][i][\"fixes\"];\n                    }\n\n                    teamFixes = teamFixes / 3;\n                }\n            }\n        }\n        \n        //FORWARDS\n        if (item.element_type === 4) {\n            valueIndex = \n                parseFloat(item.form) + \n                parseFloat(item.points_per_game) +  \n                parseFloat(item.xG) +\n                parseFloat(item.xA) +\n                (item.goals_scored / matchesPlayed) * 4 + \n                (item.assists / matchesPlayed) * 3 -\n                (item.own_goals / matchesPlayed) * 2 -\n                (item.penalties_missed / matchesPlayed) * 2 -\n                (item.red_cards / matchesPlayed) * 3 -\n                (item.yellow_cards / matchesPlayed) +  \n                (item.minutes / matchesPlayed) / 45 + \n                teamAttack -\n                teamFixes;\n    \n            if ((item.bps / matchesPlayed) >= 20) {\n                valueIndex += 2\n            }\n    \n            else if ((item.bps / matchesPlayed) < 20 && (item.bps / matchesPlayed) >= 16) {\n                valueIndex += 1\n            }\n    \n            valueIndex = valueIndex * (teamStrength / 10);\n        }\n    \n        //MIDFIELDERS\n        else if (item.element_type === 3) {\n            valueIndex =\n                parseFloat(item.form) + \n                parseFloat(item.points_per_game) +  \n                parseFloat(item.xG) +\n                parseFloat(item.xA) +\n                (item.goals_scored / matchesPlayed) * 5 + \n                (item.assists / matchesPlayed) * 3 +\n                (item.clean_sheets / matchesPlayed) - \n                (item.own_goals / matchesPlayed) * 2 -\n                (item.goals_conceded / matchesPlayed) - \n                (item.penalties_missed / matchesPlayed) * 2 -\n                (item.red_cards / matchesPlayed) * 3 -\n                (item.yellow_cards / matchesPlayed) +  \n                (item.minutes / matchesPlayed) / 45 + \n                teamDefense / 3 +\n                teamAttack - \n                teamFixes;\n    \n            if ((item.bps / matchesPlayed) >= 20) {\n                valueIndex += 2\n            }\n    \n            else if ((item.bps / matchesPlayed) < 20 && (item.bps / matchesPlayed) >= 16) {\n                valueIndex += 1\n            }\n    \n            valueIndex = valueIndex * (teamStrength / 10);\n        }\n    \n        //DEFENDERS\n        else if (item.element_type === 2) {\n            valueIndex =\n                parseFloat(item.form) + \n                parseFloat(item.points_per_game) +  \n                parseFloat(item.xG) +\n                parseFloat(item.xA) +\n                ((item.goals_scored / matchesPlayed) * 6) +\n                (item.assists / matchesPlayed) * 3 +\n                (item.clean_sheets / matchesPlayed) * 4 - \n                (item.own_goals / matchesPlayed) * 2 -\n                (item.goals_conceded / matchesPlayed) * 1.2 - \n                (item.penalties_missed / matchesPlayed) * 2 -\n                (item.red_cards / matchesPlayed) * 3 -\n                (item.yellow_cards / matchesPlayed) +  \n                (item.minutes / matchesPlayed) / 45 + \n                teamDefense +\n                teamAttack / 3 -\n                teamFixes;\n    \n            if ((item.bps / matchesPlayed) >= 20) {\n                valueIndex += 2\n            }\n    \n            else if ((item.bps / matchesPlayed) < 20 && (item.bps / matchesPlayed) >= 16) {\n                valueIndex += 1\n            }\n    \n            valueIndex = valueIndex * (teamStrength / 10);\n        }\n    \n        //GOALKEEPERS\n        else if (item.element_type === 1) {\n            valueIndex =\n                parseFloat(item.form) + \n                parseFloat(item.points_per_game) +  \n                (item.saves / matchesPlayed) * 1.3 -\n                (item.goals_conceded / matchesPlayed) * 1.5 +\n                (item.clean_sheets / matchesPlayed) * 4 + \n                (item.penalties_saved / matchesPlayed) * 5 -\n                (item.red_cards / matchesPlayed) * 3 - \n                item.yellow_cards / matchesPlayed +\n                (item.minutes / matchesPlayed) / 45 +\n                teamDefense - \n                teamFixes;\n    \n            if ((item.bps / matchesPlayed) >= 20) {\n                valueIndex += 2\n            }\n    \n            else if ((item.bps / matchesPlayed) < 20 && (item.bps / matchesPlayed) >= 16) {\n                valueIndex += 1\n            }\n    \n            valueIndex = valueIndex * (teamStrength / 10);\n        }\n    }\n\n    item[\"value_index\"] = Math.round((valueIndex + Number.EPSILON) * 100) / 100;\n    item[\"matches_played\"] = matchesPlayed;\n    ratedPlayers.push(item)\n}\n\nconst solveKnapsack = async (players) => {\n    let model = {\n        \"optimize\": \"value_index\",\n        \"opType\": \"max\",\n        \"constraints\": {\n            \"now_cost\": {\"max\": 1000},\n            \"BR\": {\"equal\": 1},\n            \"OBR\": {\"max\": 5},\n            \"POM\": {\"max\": 5},\n            \"NAP\": {\"max\": 3},\n            \"nbPlayer\": {\"equal\": 11},\n        },\n        \"variables\": players,\n        \"ints\": JSON.parse(JSON.stringify(players))\n    }\n\n    const keys = Object.keys(model.ints);\n    keys.forEach((key) => {\n        let obj = {};\n        obj[key] = 1;\n        model.ints[key] = obj\n    })  \n\n    const posConstsKeys = Object.keys(players);\n        posConstsKeys.forEach((key) => {\n        let posConstsKey = Object.keys(players[key]);\n        posConstsKey.some((keyN) => {\n            if (~keyN.indexOf(\"GK\") || ~keyN.indexOf(\"DEF\") || ~keyN.indexOf(\"MID\") || ~keyN.indexOf(\"FWD\")) {\n                model.constraints[keyN] = {\"max\": 1};\n            }\n        });\n    });\n    let result = solver.Solve(model);\n    \n    const resultKeys = Object.keys(result).slice(0, 11);\n    let finalPlayers = [];\n\n    for (const key in resultKeys) {\n        let _key = parseInt(resultKeys[key]);\n        finalPlayers.push(players[_key]);\n    }\n    return finalPlayers;\n}\n\nconst RatePlayers = async () => {\n    const players_FPL = await AssignPlayersStats();\n    allTeams = await FetchAllTeams();\n    currentGameweek = await FetchCurrentGameweek();\n    players_FPL.forEach(RatePlayer);\n    const knapsack = await solveKnapsack(ratedPlayers);\n    return knapsack;\n}\n\nexport { RatePlayers }","/mnt/d/Code/FPL-workbench/client/src/helpers/FetchPlayersStats.js",[],["58","59"],"/mnt/d/Code/FPL-workbench/client/src/helpers/AssignPlayerStats.js",[],"/mnt/d/Code/FPL-workbench/client/src/helpers/FetchAllTeams.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"60","replacedBy":"64"},{"ruleId":"62","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":23,"column":5,"nodeType":"68","messageId":"69","endLine":23,"endColumn":9},{"ruleId":"66","severity":1,"message":"70","line":24,"column":5,"nodeType":"68","messageId":"69","endLine":24,"endColumn":11},{"ruleId":"66","severity":1,"message":"71","line":25,"column":5,"nodeType":"68","messageId":"69","endLine":25,"endColumn":18},{"ruleId":"72","severity":1,"message":"73","line":199,"column":34,"nodeType":"74","messageId":"75","endLine":199,"endColumn":36},{"ruleId":"60","replacedBy":"76"},{"ruleId":"62","replacedBy":"77"},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],["78"],["79"],"no-unused-vars","'size' is assigned a value but never used.","Identifier","unusedVar","'budget' is assigned a value but never used.","'currentBudget' is assigned a value but never used.","array-callback-return","Array.prototype.some() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["78"],["79"],"no-global-assign","no-unsafe-negation"]